print("\
\tlast.colecciÃ³n([query | {}], [limit | 5], [skip | 5]); \n\
\tshortcuts: \n\
\t\tq.nota|video|anuncio|carton|cliente|encuesta|tema|video|visita(query*, fields) \n\
\t\t*query puede ser un idInc, un correo, un string de ObjectId o un objeto \n\
");

var host = db.serverStatus().host.split('.')[0]

prompt = function(){
	return host+'@'+db+' > ';
}

var Base62 = (function (my) {
  my.chars = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

  my.encode = function(i){
    if (i === 0) {return '0'}
    var s = ''
    while (i > 0) {
      s = this.chars[i % 62] + s
      i = Math.floor(i/62)
    }
    return s
  };
  my.decode = function(a,b,c,d){
    for (
      b = c = (
        a === (/\W|_|^$/.test(a += "") || a)
      ) - 1;
      d = a.charCodeAt(c++);
    )
    b = b * 62 + d - [, 48, 29, 87][d >> 5];
    return b
  };

  return my;
}({}));

var pq = function(id){
	var r = null;
	switch (typeof id) {
		case 'number':
			r = {idInc: id}
		break;
		case 'string':
			if (id.match(/@/)) {
				r = {correo:id};
			} else if (id.length < 24) {
				r = {idInc:id};
			} else {
				r = {_id:ObjectId(id)};
			}
		break;
		case 'object':
			r = id.constructor==ObjectId ? {_id:id} : id;
		break;
	}
	return r;
};

var q = {
	__noSuchMethod__: function(col, args){
		var cols = db.getCollectionNames();
		var found = false;
		cols.forEach(function(c){
			expr = new RegExp('^'+col, 'i');
			if (expr.test(c)) {
				[query, fields] = args;
				fields = fields || {};
				tipo_find = col.match(/s$/) ? 'find' : 'findOne';
				found = db[c][tipo_find](pq(query), fields);
				if (tipo_find == 'find') {
					found = found.pretty();
				}
			}
		});
				
		if (found) {
			return found;
		} else {
			throw new ReferenceError(col+" is not defined");
		}
		
	}
};

var next = function(){ return last.next() };
var last = {
	skip: null,
	limit: null,
	query: null,
	col: null,
	next: function(){
		last.skip += last.limit;
		return last.do(last.col, [last.query, last.limit, last.skip]);
	},
	do: function(col, args){
		var query, limit, skip;
		[query, limit, skip] = args;
		
		var sort = {};
		switch (col) {
			case 'notas':
				sort = {creada:-1};
			break;
			case 'blamelog':
				sort = {fecha:-1};
			break;
			case 'programados':
				sort = {fecha:-1};
			break;
			case 'visitas':
				sort = {fecha:-1};
			break;
			default: 
				sort = {creado:-1};
			break;
		}
		
		sort = col=='notas'? {creada:-1} : {creado:-1};
		last.query = pq(query) || {};
		last.limit = limit || 5;
		last.skip = skip || 0;
		last.col = col;
		var rs = db[col].find(last.query);
		if (rs) {
			rs = rs.skip(last.skip).limit(last.limit)
			rs = rs.pretty();
		} else {
			print('nada');
		}
		return rs;
	},
	__noSuchMethod__: function(col,args){
		return this.do(col, args);
	}
};